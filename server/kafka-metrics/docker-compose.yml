# version: '3.7'
# services:
#   zookeeper: 
#     image: 'zookeeper:3.6.3' 
#     container_name: 'zookeeper'
#     ports:
#       - '2181:2181' 
#   kafka: 
#     image: 'confluentinc/cp-kafka:6.2.0'
#     container_name: 'kafka'
#     depends_on:
#       - zookeeper
#     ports: 
#       - '9092:9092'
#     environment:
#       KAFKA_ENABLE_KRAFT: 'yes'
#       KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
# version: "3.7"
#  services:
#   kraft:
#     image: bitnami/kafka
#     container_name: kafka
#     ports:
#       - 2181:2181
#   kafka:
#     image: dockerpromkafka:latest
#     container_name: kafka
#     ports:
#       - 9092:9092
#       - 7070:7070
#     depends_on:
#       - kraft
#     environment:
#      KAFKA_ENABLE_KRAFT: yes
#      KAFKA_CFG_PROCESS_ROLES: broker,controller
#      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:2181
#      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
#      KAFKA_BROKER_ID: 1
#      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:2181
#      ALLOW_PLAINTEXT_LISTENER: yes
#      KAFKA_CFG_NODE_ID: 1
#      KAFKA_KRAFT_CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
#      EXTRA_ARGS: -javaagent:/opt/kafka_2.13-2.8.1/libs/jmx_prometheus_javaagent.jar=7070:/opt/kafka_2.13-2.8.1/libs/kafka.yml
#     volumes:
#       - ./kafka:/bitnami/kafka      
# version: "3"
# services:
#   zookeeper:
#     image: wurstmeister/zookeeper:latest
#     container_name: zookeeper
#     ports:
#       - '2181:2181'
#   prometheus: 
#     image: prom/prometheus:latest
#     ports:
#     - '9090:9090/tcp'
#     command:
#     - '--config.file=prometheus.yml'
#     volumes:
#     - ${PWD}/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#     links:
#     - kafka-cluster
#   kafka-cluster:
#     image: dockerpromkafka:latest
#     links:
#     - zookeeper
#     ports:
#       - '9092:9092'
#       - '1099:1099'
#     environment:
#       KAFKA_ADVERTISED_HOST_NAME: localhost
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       EXTRA_ARGS: -javaagent:/opt/kafka/libs/jmx_prometheus_javaagent.jar=7070:/opt/kafka/libs/kafka.yml
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#       KAFKA_DELETE_TOPIC_ENABLE: 'true'
#       KAFKA_CREATE_TOPICS: 'topic-test:1:1'
#       KAFKA_ADVERTISED_PORT: 9092
#       JMX_PORT: 1099
#       KAFKA_JMX_OPTS: '-Dcom.sun.management.jmxremote=true
#         -Dcom.sun.management.jmxremote.authenticate=false
#         -Dcom.sun.management.jmxremote.ssl=false
#         -Djava.rmi.server.hostname=localhost
#         -Dcom.sun.management.jmxremote.host=localhost
#         -Dcom.sun.management.jmxremote.port=9999
#         -Dcom.sun.management.jmxremote.rmi.port=9999
#         -Djava.net.preferIPv4Stack=true'
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
  kafka:
    image: dockerpromkafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
      - '7070:7070'
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      EXTRA_ARGS: -javaagent:/opt/kafka_2.13-2.8.1/libs/jmx_prometheus_javaagent.jar=7070:/opt/kafka_2.13-2.8.1/libs/kafka.yml
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: 'topic-test:1:1'
      KAFKA_ADVERTISED_PORT: 9092
      JMX_PORT: 1099
      KAFKA_JMX_OPTS: '-Dcom.sun.management.jmxremote=true
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=localhost
        -Dcom.sun.management.jmxremote.host=localhost
        -Dcom.sun.management.jmxremote.port=9999
        -Dcom.sun.management.jmxremote.rmi.port=9999
        -Djava.net.preferIPv4Stack=true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# run 'docker compose up' to initialize container locally



